{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}

import Data.Aeson
import GHP
import Control.Applicative ((<$>), (<*>))
import Control.Monad (mzero, mapM)

data Repo = Repo
    { id :: Int
    , owner :: User
    , name :: String
    , full_name :: String
    , description :: String
    , private :: Bool
    , fork :: Bool
    , url :: String
    , homepage :: String
    , language :: String
    , forks_count :: Int
    , stargazers_count :: Int
    , watchers_count :: Int
    , size :: Int
    , default_branch :: String
    , open_issues_count :: Int
    , has_issues :: Bool
    , has_wiki :: Bool
    , has_pages :: Bool
    , has_downloads :: Bool
    , pushed_at :: String
    , created_at :: String
    , updated_at :: String
    , watchers :: Int
    } deriving Show

instance FromJSON Repo where
    parseJSON (Object v) = Repo <$>
        v .: "id" <*>
        v .: "owner" <*>
        v .: "name" <*>
        v .: "full_name" <*>
        v .: "description" <*>
        v .: "private" <*>
        v .: "fork" <*>
        v .: "url" <*>
        v .: "homepage" <*>
        v .: "language" <*>
        v .: "forks_count" <*>
        v .: "stargazers_count" <*>
        v .: "watchers_count" <*>
        v .: "size" <*>
        v .: "default_branch" <*>
        v .: "open_issues_count" <*>
        v .: "has_issues" <*>
        v .: "has_wiki" <*>
        v .: "has_pages" <*>
        v .: "has_downloads" <*>
        v .: "pushed_at" <*>
        v .: "created_at" <*>
        v .: "updated_at" <*>
        v .: "watchers"
    parseJSON _ = mzero

-- hooray for autogenerated code
instance ToJSON Repo where
    toJSON (Repo id owner name full_name description private fork url homepage language forks_count stargazers_count watchers_count size default_branch open_issues_count has_issues has_wiki has_pages has_downloads pushed_at created_at updated_at watchers) = object ["id" .= id, "owner" .= owner, "name" .= name, "full_name" .= full_name, "description" .= description, "private" .= private, "fork" .= fork, "url" .= url, "homepage" .= homepage, "language" .= language, "forks_count" .= forks_count, "stargazers_count" .= stargazers_count, "watchers_count" .= watchers_count, "size" .= size, "default_branch" .= default_branch, "open_issues_count" .= open_issues_count, "has_issues" .= has_issues, "has_wiki" .= has_wiki, "has_pages" .= has_pages, "has_downloads" .= has_downloads, "pushed_at" .= pushed_at, "created_at" .= created_at, "updated_at" .= updated_at, "watchers" .= watchers]

injsons :: IO [Maybe Object]
injsons = do
    basepath' <- basepath "Data/github/user-repos/%0.8d.json"
    let paths = makePaths basepath' [1..100]
    decodeFiles paths


